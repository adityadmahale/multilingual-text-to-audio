AWSTemplateFormatVersion: "2010-09-09"
Description: Green cloud project

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  DBUsername:
    Type: String
    Description: Username for MySQL database access
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: It must begin with a letter and contain only alphanumeric characters.
  DBUserPassword:
    Type: String
    Description: Password for MySQL database access
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: It must begin with a letter and contain only alphanumeric characters.

Resources:
  ProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      InstanceTenancy: default
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  ProjectInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Internet-Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ProjectVPC
      InternetGatewayId:
        Ref: ProjectInternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProjectInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Routes-1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Subnet-2

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ProjectVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Routes-2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnet1NatRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  PrivateSubnet2NatRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Database instances security group"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  ServerlessDB:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBUserPassword
      DBClusterIdentifier: !Sub ${EnvironmentName}-DBCluster
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Port: 3306
      DatabaseName: "greencloud"
      Engine: aurora
      EngineVersion: 5.6.10a
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 16
        MinCapacity: 2
        SecondsUntilAutoPause: 1000
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        - !GetAtt PrivateSubnet1.SubnetId
        - !GetAtt PrivateSubnet2.SubnetId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB-Subnet-group

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ec2-security-group"
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ELBAPIServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0

  APIInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: APIInstanceProfile
      Roles:
        - LabRole

  apiLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-04505e74c0741db8d
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt APIInstanceProfile.Arn
        KeyName: ProjectKey
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                export SECRET_KEY="u#(073+lqf#psgl_v+4=99hau2wjxtpd3)lk5ys(&w69tbynfs"
                export DB_NAME=greencloud
                export DB_USER=${DBUsername}
                export DB_HOST=${DBHost}
                export DB_PASSWORD=${DBUserPassword}
                export DJANGO_SETTINGS_MODULE=greencloud.settings.prod
                sudo apt-get update
                sudo apt install -y python3-pip
                sudo apt install -y mysql-client-core-8.0
                pip3 install pipenv
                sudo apt install -y libssl-dev libmysqlclient-dev
                git clone https://github.com/greencloud31/backend.git
                cd backend
                python3 -m pipenv install
                python3 -m pipenv run python manage.py migrate
                python3 -m pipenv run python manage.py collectstatic
                sudo apt install -y nginx
                sudo systemctl stop nginx
                sudo cp scripts/nginx_default /etc/nginx/sites-enabled/default
                sudo systemctl start nginx
                python3 -m pipenv run gunicorn greencloud.wsgi:application --bind 0.0.0.0:9000
              - DBHost: !GetAtt ServerlessDB.Endpoint.Address
                DBUsername: !Ref DBUsername
                DBUserPassword: !Ref DBUserPassword
  APILoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      Subnets:
        - !Ref PublicSubnet
      CrossZone: "true"
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      SecurityGroups:
        - !GetAtt ELBAPIServerSecurityGroup.GroupId
  apiASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGatewayAttachment
    Properties:
      MinSize: "0"
      MaxSize: "1"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 100
      LaunchTemplate:
        LaunchTemplateId: !Ref apiLaunchTemplate
        Version: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LoadBalancerNames:
        - !Ref APILoadBalancer
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: greencloudproject31
      AccessControl: PublicReadWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  LambdaConverter:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Sub:
            - |
              import json
              import boto3
              import time

              def lambda_handler(event, context):
                session = boto3.Session(region_name='us-east-1')
                translate = session.client(service_name='translate', use_ssl=True)
                result = translate.translate_text(
                    Text=event['text'], 
                    SourceLanguageCode="en", 
                    TargetLanguageCode=event['language']
                )
                polly = session.client(service_name='polly', use_ssl=True)
                if event['language'] == "hi":
                    voiceId = 'Aditi'
                    languageCode = 'hi-IN'
                elif event['language'] == "fr-CA":
                    voiceId = 'Chantal'
                    languageCode = 'fr-CA'
                elif event['language'] == "ar":
                    voiceId = 'Zeina'
                    languageCode = 'arb'
                elif event['language'] == "it":
                    voiceId = 'Carla'
                    languageCode = 'it-IT'
                elif event['language'] == "de":
                    voiceId = 'Marlene'
                    languageCode = 'de-DE'
                audio = polly.start_speech_synthesis_task(
                            Text=result.get('TranslatedText'),
                            LanguageCode=languageCode, VoiceId=voiceId, OutputFormat='mp3', Engine="standard",
                            TextType='text', SampleRate='8000', OutputS3BucketName="${BucketName}", 
                            OutputS3KeyPrefix="greenclouduser"
                        )
                object_name = audio['SynthesisTask']['OutputUri']
                startIndex = object_name.find('greenclouduser')
                keyName = object_name[startIndex: len(object_name)]
                s3 = session.client('s3')
                resp = s3.generate_presigned_url('get_object',
                                        Params={'Bucket': '${BucketName}',
                                        'Key': keyName},
                                        ExpiresIn=100000)
                
                return str(resp)
            - BucketName: !Ref S3Bucket
      Description: Converts text and passes it to lambda
      FunctionName: ProjectLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::478604651443:role/LabRole
      Runtime: python3.9
  WebInstance:
    Type: AWS::EC2::Instance
    DependsOn: S3Bucket
    Properties:
      SubnetId: !GetAtt PublicSubnet.SubnetId
      ImageId: ami-04505e74c0741db8d
      InstanceType: t2.micro
      KeyName: ProjectKey
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              export REACT_APP_API_URL=${URL_API}
              sudo apt-get update
              curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
              sudo apt install -y nodejs
              git clone https://github.com/greencloud31/audiotranslator
              cd audiotranslator
              npm i
              npm run build
              sudo apt-get install nginx -y
              sudo cp -r build/* /var/www/html
            - URL_API:
                Fn::Join: ["", ["http://", !GetAtt APILoadBalancer.DNSName]]

Outputs:
  WebsiteURL:
    Description: Website URL
    Value: !GetAtt WebInstance.PublicDnsName
